{"ast":null,"code":"/**\n * Given a js file object representing a jpg or png image, such as one taken\n * from a html file input element, return a promise which resolves to the file\n * data as a data url.\n * More info:\n *   https://developer.mozilla.org/en-US/docs/Web/API/File\n *   https://developer.mozilla.org/en-US/docs/Web/API/FileReader\n *   https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n * \n * Example Usage:\n *   const file = document.querySelector('input[type=\"file\"]').files[0];\n *   console.log(fileToDataUrl(file));\n * @param {File} file The file to be read.\n * @return {Promise<string>} Promise which resolves to the file as a data url.\n */\nexport default function fileToDataUrl(file) {\n  const validFileTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/JPG', 'image/PNG', 'image/JPEG'];\n  console.log(file);\n  const valid = validFileTypes.find(type => type === file.type);\n  // Bad data, let's walk away.\n  if (!valid) {\n    throw Error('provided file is not a png, jpg or jpeg image.');\n  }\n  const reader = new FileReader();\n  const dataUrlPromise = new Promise((resolve, reject) => {\n    reader.onerror = reject;\n    reader.onload = () => resolve(reader.result);\n  });\n  reader.readAsDataURL(file);\n  return dataUrlPromise;\n}","map":{"version":3,"names":["fileToDataUrl","file","validFileTypes","console","log","valid","find","type","Error","reader","FileReader","dataUrlPromise","Promise","resolve","reject","onerror","onload","result","readAsDataURL"],"sources":["/Users/james/Projects/cms/frontend/src/utils/helpers.js"],"sourcesContent":["/**\n * Given a js file object representing a jpg or png image, such as one taken\n * from a html file input element, return a promise which resolves to the file\n * data as a data url.\n * More info:\n *   https://developer.mozilla.org/en-US/docs/Web/API/File\n *   https://developer.mozilla.org/en-US/docs/Web/API/FileReader\n *   https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n * \n * Example Usage:\n *   const file = document.querySelector('input[type=\"file\"]').files[0];\n *   console.log(fileToDataUrl(file));\n * @param {File} file The file to be read.\n * @return {Promise<string>} Promise which resolves to the file as a data url.\n */\nexport default function fileToDataUrl(file) {\n    const validFileTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/JPG', 'image/PNG', 'image/JPEG'];\n    console.log(file);\n    const valid = validFileTypes.find(type => type === file.type);\n    // Bad data, let's walk away.\n    if (!valid) {\n        throw Error('provided file is not a png, jpg or jpeg image.');\n    }\n\n    const reader = new FileReader();\n    const dataUrlPromise = new Promise((resolve, reject) => {\n        reader.onerror = reject;\n        reader.onload = () => resolve(reader.result);\n    });\n    reader.readAsDataURL(file);\n    return dataUrlPromise;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,aAAaA,CAACC,IAAI,EAAE;EACxC,MAAMC,cAAc,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC;EACvGC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACjB,MAAMI,KAAK,GAAGH,cAAc,CAACI,IAAI,CAACC,IAAI,IAAIA,IAAI,KAAKN,IAAI,CAACM,IAAI,CAAC;EAC7D;EACA,IAAI,CAACF,KAAK,EAAE;IACR,MAAMG,KAAK,CAAC,gDAAgD,CAAC;EACjE;EAEA,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;EAC/B,MAAMC,cAAc,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpDL,MAAM,CAACM,OAAO,GAAGD,MAAM;IACvBL,MAAM,CAACO,MAAM,GAAG,MAAMH,OAAO,CAACJ,MAAM,CAACQ,MAAM,CAAC;EAChD,CAAC,CAAC;EACFR,MAAM,CAACS,aAAa,CAACjB,IAAI,CAAC;EAC1B,OAAOU,cAAc;AACzB"},"metadata":{},"sourceType":"module"}