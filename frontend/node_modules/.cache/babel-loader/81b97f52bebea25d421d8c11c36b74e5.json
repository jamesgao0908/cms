{"ast":null,"code":"export function stringAvatar(name) {\n  if (containsWhitespace(name)) return {\n    sx: {\n      bgcolor: stringToColor(name)\n    },\n    children: `${name.split(\" \")[0][0]}${name.split(\" \")[1][0]}`\n  };else {\n    return {\n      sx: {\n        bgcolor: stringToColor(name)\n      },\n      children: `${name[0]}`\n    };\n  }\n}\nfunction stringToColor(string) {\n  let hash = 0;\n  let i;\n\n  /* eslint-disable no-bitwise */\n  for (i = 0; i < string.length; i += 1) {\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  let color = \"#\";\n  for (i = 0; i < 3; i += 1) {\n    const value = hash >> i * 8 & 0xff;\n    color += `00${value.toString(16)}`.slice(-2);\n  }\n  /* eslint-enable no-bitwise */\n\n  return color;\n}\nfunction containsWhitespace(str) {\n  return /\\s/.test(str);\n}\nexport function formatAllImagesToArray(e) {\n  return JSON.parse(e);\n}","map":{"version":3,"names":["stringAvatar","name","containsWhitespace","sx","bgcolor","stringToColor","children","split","string","hash","i","length","charCodeAt","color","value","toString","slice","str","test","formatAllImagesToArray","e","JSON","parse"],"sources":["/Users/james/Projects/cms/client/src/utils/tools.js"],"sourcesContent":["export function stringAvatar(name) {\n  if (containsWhitespace(name))\n    return {\n      sx: {\n        bgcolor: stringToColor(name),\n      },\n      children: `${name.split(\" \")[0][0]}${name.split(\" \")[1][0]}`,\n    };\n  else {\n    return {\n      sx: {\n        bgcolor: stringToColor(name),\n      },\n      children: `${name[0]}`,\n    };\n  }\n}\n\nfunction stringToColor(string) {\n  let hash = 0;\n  let i;\n\n  /* eslint-disable no-bitwise */\n  for (i = 0; i < string.length; i += 1) {\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = \"#\";\n\n  for (i = 0; i < 3; i += 1) {\n    const value = (hash >> (i * 8)) & 0xff;\n    color += `00${value.toString(16)}`.slice(-2);\n  }\n  /* eslint-enable no-bitwise */\n\n  return color;\n}\n\nfunction containsWhitespace(str) {\n  return /\\s/.test(str);\n}\n\nexport function formatAllImagesToArray(e) {\n  return JSON.parse(e);\n}\n"],"mappings":"AAAA,OAAO,SAASA,YAAYA,CAACC,IAAI,EAAE;EACjC,IAAIC,kBAAkB,CAACD,IAAI,CAAC,EAC1B,OAAO;IACLE,EAAE,EAAE;MACFC,OAAO,EAAEC,aAAa,CAACJ,IAAI;IAC7B,CAAC;IACDK,QAAQ,EAAG,GAAEL,IAAI,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,GAAEN,IAAI,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;EAC7D,CAAC,CAAC,KACC;IACH,OAAO;MACLJ,EAAE,EAAE;QACFC,OAAO,EAAEC,aAAa,CAACJ,IAAI;MAC7B,CAAC;MACDK,QAAQ,EAAG,GAAEL,IAAI,CAAC,CAAC,CAAE;IACvB,CAAC;EACH;AACF;AAEA,SAASI,aAAaA,CAACG,MAAM,EAAE;EAC7B,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAIC,CAAC;;EAEL;EACA,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACG,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IACrCD,IAAI,GAAGD,MAAM,CAACI,UAAU,CAACF,CAAC,CAAC,IAAI,CAACD,IAAI,IAAI,CAAC,IAAIA,IAAI,CAAC;EACpD;EAEA,IAAII,KAAK,GAAG,GAAG;EAEf,KAAKH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IACzB,MAAMI,KAAK,GAAIL,IAAI,IAAKC,CAAC,GAAG,CAAE,GAAI,IAAI;IACtCG,KAAK,IAAK,KAAIC,KAAK,CAACC,QAAQ,CAAC,EAAE,CAAE,EAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC9C;EACA;;EAEA,OAAOH,KAAK;AACd;AAEA,SAASX,kBAAkBA,CAACe,GAAG,EAAE;EAC/B,OAAO,IAAI,CAACC,IAAI,CAACD,GAAG,CAAC;AACvB;AAEA,OAAO,SAASE,sBAAsBA,CAACC,CAAC,EAAE;EACxC,OAAOC,IAAI,CAACC,KAAK,CAACF,CAAC,CAAC;AACtB"},"metadata":{},"sourceType":"module"}